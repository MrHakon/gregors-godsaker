@* Ved å markere en fil med @page og en filsti, sier vi til Blazor at nettleseren kan navigere til denne. *@
@page "/Komponenter"
@using GregorsGodsaker.Components.Services
@using GregorsGodsaksKontrakter

@* Slik gir man siden en tittel *@
<PageTitle>Komponenter</PageTitle>


<div class="d-flex flex-column gap-3 pb-5" style="width: 500px;">
    <h1>Komponenter</h1>
    <p>
        Her er et par vanlige elementer som man forventer å finne på en nettside. Det er <b>ikke</b> meningen at disse må brukes for å løse oppgaven. De er mer ment som hjelp til å forstå Blazor sin syntaks.
        Det er ofte flere måter å skrive dem på.
    </p>
    <div class="border p-2 rounded">
        <h3>Knapp</h3>
        @* Verdens enkleste eksempel på hvordan en komponent kan brukes. 
        Navnet hentes fra filnavnet til komponenten *@
        <ButtonComponent/>
    </div>

    <div class="border p-2 rounded">
        @* Her er et tekstinput-felt med databinding *@
        <h3>Tekst-input</h3>
        <InputComponent/>
    </div>

    @* Denne komponenten tar inn noe data, og returnerer noe annet. *@
    <div class="border p-2 rounded d-flex flex-column gap-2">
        <h3>Liste</h3>
        <div class="bg-light p-1 rounded">
            <h4>Vinvelger</h4>
            <ListComponent
                WineData="WineData"
                ReturnClickedSnack="HandleWine"/>
        </div>

        @if (ClickedWine != null)
        {
            <div class="mx-1 p-1 text-white rounded" style="background-color: lightblue">
                <p>Dette er data som har blitt returnert til hovedsiden, fra en annen komponent</p>
                <p>Du trykket på: <b>@ClickedWine</b></p>
            </div>
        }
    </div>

    @* Denne komponenten tar inn noe data, og returnerer noe annet. *@
    <div class="border p-2 rounded d-flex flex-column gap-2">
        <h3>Nedtrekksmeny</h3>
        <div class="bg-light p-1 rounded">
            <DropdownComponent
                Snacks="SnackData"
                HandleSnack="HandleSnackFromDropdown"/>
        </div>

        @if (DropdownSnack != null)
        {
            <div class="mx-1 p-2 text-white rounded" style="background-color: lightblue">
                <p>Dette er data som har blitt returnert til hovedsiden, fra en annen komponent</p>
                <p>
                    Du valgte: <b>@DropdownSnack</b>

                    @* Det må da finnes en bedre måte å håndtere punsjrull på *@
                    @if (DropdownSnack is "Punsjrull" or "Punsj-rull" or "Pønsjrull")
                    {
                        <span> :(</span>
                    }
                </p>
            </div>
        }
    </div>
</div>

@code {

    // Dette er hvordan man kan bruke dependency injection til å benytte en service, som for eksempel henter ut data fra et API.
    // Merk at servicen må registreres i Program.cs
    [Inject] public required ISnackService SnackService { get; set; }

    private List<Snack>? SnackData { get; set; }
    private string? ClickedWine { get; set; }
    private string? DropdownSnack { get; set; }

    private List<Wine>? WineData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SnackData = await SnackService.GetSnacks();
        WineData = await SnackService.GetWines();
    }

    // Vi sender denne funksjonen inn som et parameter til ListComponent, slik at ListComponent kan bruke den til å
    // gi oss noe data tilbake
    private void HandleWine(Wine wine)
    {
        ClickedWine = wine.Name;
    }

    private void HandleSnackFromDropdown(string? snack)
    {
        DropdownSnack = snack;
    }

}